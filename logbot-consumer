#!/usr/bin/perl
# import event json files created by logbot-irc and inserts into network
# database

use local::lib;
use v5.10;
use strict;
use warnings;

use FindBin qw( $RealBin );
use lib "$RealBin/lib";

BEGIN { $ENV{TZ} = 'UTC' }

use Data::Dumper qw( Dumper );
use DateTime ();
use Encode qw( encode );
use LogBot::Config qw( find_config load_config reload_config );
use LogBot::Database qw( dbh dbh_disconnect execute_with_retry );
use LogBot::JobQueue ();
use LogBot::Util qw( event_to_string logbot_init squash_error timestamp );
use Time::HiRes qw( sleep );
use Try::Tiny qw( catch try );

my $config = load_config(find_config(shift)) // die "syntax: logbot-consumer <config file>\n";
logbot_init($config);

my $quit = 0;
$SIG{INT} = sub { $quit = 1 };

# init/cache database/queue
dbh($config, read_write => 1, cached => 1);
my $job_queue = LogBot::JobQueue->new($config);

my $last_status = '';
my %tally;
while (!$quit) {

    # print daily status
    my $now = DateTime->now();
    if ($now->ymd ne $last_status) {
        say $now->ymd('-') if scalar(keys %tally);
        foreach my $channel (sort { $tally{$b} <=> $tally{$b} } keys %tally) {
            printf "%7s %s\n", $tally{$channel}, $channel;
        }
        %tally       = ();
        $last_status = $now->ymd;
    }

    # wait for next job, blocking call
    my ($job, $event) = $job_queue->fetch_job();
    last unless defined $job;

    if ($ENV{DEBUG}) {
        say timestamp(), ' << ', encode('UTF-8', event_to_string($event));
    }

    $config = reload_config($config);

    # deal with lag between queue and config
    my $ignore = 0;
    if (my $channel = $config->{channels}->{ $event->{channel} }) {
        $ignore = 1 if $channel->{no_logs};
        $ignore = 1 if $channel->{disabled};
    } else {
        $ignore = 1;
    }
    if ($ignore) {
        say timestamp(), ' -- ignoring event' if $ENV{DEBUG};
        $job_queue->delete_job($job);
        next;
    }

    # insert into db
    $quit = !execute_with_retry(
        $config,
        sub {
            my ($dbh) = @_;
            return 0 if $quit;

            $dbh->do('INSERT INTO logs(time,channel,nick,type,text) VALUES (?,?,?,?,?)',
                undef, $event->{time}, $event->{channel}, $event->{nick}, $event->{type}, $event->{text});
            $job_queue->delete_job($job);
            undef $job;

            $tally{ $event->{channel} }++;
            return 1;
        }
    );
}

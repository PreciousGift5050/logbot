#!/usr/bin/perl
use local::lib;
use v5.10;
use strict;
use warnings;

use FindBin qw( $RealBin );
use lib "$RealBin/lib";

BEGIN { $ENV{TZ} = 'UTC' }

use LogBot::Config qw( find_config load_config );
use LogBot::Database qw( dbh execute_with_retry like_value replace_sql_placeholders );
use LogBot::Util qw( event_to_string logbot_init );
use Mojo::Util qw( trim );
use Term::ReadKey qw( ReadKey ReadMode );
use Text::ParseWords qw( quotewords );

$| = 1;

END {
    ReadMode(0);
}

my $config = load_config(find_config(shift)) // die "syntax: logbot-delete <config file> <query>\n";
logbot_init($config, quiet => 1);

my $query = join(' ', @ARGV);
my $nick = '';
if ($query =~ s/^<([^>]+)>\s*//) {
    $nick = $1;
}
$query = trim($query);
$nick  = trim($nick);

my $dbh = dbh($config, read_write => 1);

my (@where, @values);
if ($query) {
    my @parts;
    foreach my $word (quotewords('\s+', 0, $query)) {
        push @parts,  '(text LIKE ?)';
        push @values, like_value($word);
    }
    push @where, join(' AND ', @parts);
}
if ($nick) {
    push @where,  'nick = ?';
    push @values, $nick;
}
die "query not provided\n" unless @where;

my $sql = 'SELECT * FROM logs WHERE (' . join(') AND (', @where) . ') ORDER BY channel,time';
say replace_sql_placeholders($dbh, $sql, \@values);
my $sth = $dbh->prepare($sql);
$sth->execute(@values);

my $all = 0;
while (my $event = $sth->fetchrow_hashref) {
    say event_to_string($event);

    my $key;
    if ($all) {
        $key = 'y';
    } else {
        print '(y)es (n)o (a)ll (q)uit ? ';
        $key = confirm();
    }

    if ($key eq 'a') {
        $all = 1;
        $key = 'y';
    }

    if ($key eq 'y') {
        execute_with_retry(
            $config,
            sub {
                my ($dbh) = @_;
                $dbh->do("DELETE FROM logs WHERE id = ?", undef, $event->{id});
                return 1;
            }
        ) // die;
        print "deleted\n";
    } elsif ($key eq 'n') {
        print "\r\033[K";
    } else {
        print "\n";
        exit;
    }
}

sub confirm {
    my $key = '';
    ReadMode(4);
    do {
        $key = ReadKey();
        if (ord($key) == 3 || ord($key) == 27) {
            print "^C\n";
            ReadMode(0);
            exit;
        }
        $key = lc($key);
    } until $key =~ /^[ynaq]$/;
    ReadMode(0);
    return $key;
}

#!/usr/bin/perl
# migrate config and logs from old logbot version
BEGIN { $ENV{TZ} = 'UTC' }

use local::lib;
use v5.10;
use strict;
use warnings FATAL => 'all';

use FindBin qw( $RealBin );
use lib "$RealBin/lib";

use Config::General ();
use DBD::SQLite::Constants qw( :file_open );
use DBI ();
use File::Copy qw( copy );
use File::Temp qw( tempfile );
use LogBot::Config qw( load_config save_config );
use LogBot::Database qw( dbh );
use LogBot::Util qw( file_for normalise_channel slurp spurt );
use Mojo::JSON qw( j );

# dev-migrate <source path> <dest path>

die "syntax: dev-migrate <source path> <dest path>\n" unless scalar(@ARGV) == 2;
my ($source_path, $dest_path) = @ARGV;
$source_path =~ s#/$##;
$dest_path =~ s#/$##;

# config

my %old_config = Config::General->new(
    -ConfigFile        => "$source_path/logbot.conf",
    -AllowMultiOptions => 'no',
    -AutoTrue          => 'yes',
    -LowerCaseNames    => 'yes',
)->getall();

# mappings for irc host
my %server_mapping = (
    'irc.mozilla.org:6668'  => 'ssl:irc.mozilla.org:6697',
    'irc.freenode.net:6667' => 'ssl:irc.freenode.net:6697',
    'irc.gnome.org:6667'    => 'ssl:irc.gnome.org:6697',
    'irc.w3.org:6665'       => 'irc.w3.org:6667',
);

my @temp_files;

my @networks;
foreach my $network_name (sort keys %{ $old_config{network} }) {
    my $network     = $old_config{network}->{$network_name};
    my $config_file = "$RealBin/etc/$network_name.yaml";

    my $config = {
        name     => $network_name,
        title    => lcfirst($network_name),
        path     => "$dest_path/$network_name",
        help     => "I am glob's logbot - https://$network_name.logbot.info/",
        channels => {},
        bots     => [split(' ', $network->{bots} // '')],
        url      => "https://$network_name.logbot.info/",
        _internal => { file => $config_file },
        irc       => {
            host => ($server_mapping{ $network->{server} . ':' . $network->{port} } // die),
            nick => $network->{nick},
            real_name => $network->{name},
        },
    };

    $config->{irc}->{password} = $network->{password} if $network->{password};
    foreach my $channel_name (sort keys %{ $network->{channel} }) {
        my $channel = $network->{channel}->{$channel_name};
        next unless $channel->{visibility} eq 'public';
        next unless $channel->{join};
        $config->{channels}->{"#$channel_name"} =
            $channel->{password}
            ? { password => $channel->{password} }
            : {};
    }

    save_config($config);

    push @networks, {
        name        => $network_name,
        config_file => $config_file,
        };
}

END {
    foreach my $file (@temp_files) {
        unlink($file);
    }
}

foreach my $network (@networks) {
    my $dump_path = "$source_path/" . $network->{name};

    my $config = load_config($network->{config_file});
    my @channels = sort map { normalise_channel($_) } keys %{ $config->{channels} };

    unlink(file_for($config, 'store'));
    my $dbh = dbh($config, read_write => 1);

    foreach my $channel (@channels) {
        my $db_file = substr($channel, 1);
        $db_file =~ s/[^a-z1-9_-]/_/g;  # as per legacy logbot, bugs and all
        $db_file = "$dump_path/$db_file.sqlite.gz";

        if (!-e $db_file) {
            say "failed to find $db_file";
            next;
        }

        say "$channel";
        my $temp_file = "/tmp/" . substr($channel, 1) . ".sqlite.gz";
        push @temp_files, $temp_file;

        say "  copying";
        copy($db_file, $temp_file) or die "$!";
        say "  unzipping";
        system('gunzip', '-f', $temp_file);
        $temp_file =~ s/\.gz$//;
        push @temp_files, $temp_file;
        die unless -e $temp_file;

        say "  importing";
        $dbh->do('BEGIN TRANSACTION');
        my $src_dbh = DBI->connect(
            "DBI:SQLite:$temp_file",
            '', '', {
                PrintError        => 0,
                RaiseError        => 1,
                sqlite_open_flags => SQLITE_OPEN_READONLY,
            }
        );
        my $sth = $src_dbh->prepare("SELECT ROWID,* FROM logs WHERE event IN (0,3) ORDER BY time");
        $sth->execute();

        while (my $rh = $sth->fetchrow_hashref) {
            $dbh->do(
                "INSERT INTO logs(old_id,time,channel,nick,type,text) VALUES (?,?,?,?,?,?)",
                undef, $rh->{rowid}, $rh->{time}, $channel, $rh->{nick}, ($rh->{event} == 0 ? 0 : 1),
                $rh->{data}
            );
        }

        say "  committing";
        $dbh->do('COMMIT TRANSACTION');

        undef($src_dbh);
        unlink($temp_file);
    }
}

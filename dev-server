#!/usr/bin/perl
use local::lib;
use v5.10;
use strict;
use warnings;

use Mojo::Server::Morbo ();
use Time::HiRes qw( sleep );

$| = 1;
$ENV{DEBUG} = 1;
$ENV{LOGBOT_CONFIG} = join(',', @ARGV) || '_development';

die "failed to find makefile\n" unless -e 'makefile';

# asset watch
my $pid = fork();
if (defined($pid) && $pid == 0) {
    my $make = Make->new();
    while (1) {
        $make->execute() if $make->updated();
        sleep(0.25);
    }
}

# web server
my $morbo = Mojo::Server::Morbo->new();
$morbo->backend->watch(['web/templates/', 'web/templates/layouts/', 'lib/LogBot']);
$morbo->run('logbot-web');

package Make;
use strict;
use v5.10;
use warnings;

use FindBin qw( $RealBin );
use lib "$RealBin/lib";

use File::Find qw( find );
use File::Spec ();
use LogBot::Util qw( run );

sub new {
    my ($class) = @_;
    return bless({ ts => 0, first => 1 }, $class);
}

sub execute {
    my ($self) = @_;
    if ($self->{clean}) {
        run('make', 'clean');
        delete $self->{clean};
    }
    my @command = ('make');
    push @command, '--quiet' if delete $self->{first};
    run(@command);
}

sub updated {
    my ($self) = @_;

    if ((stat 'makefile')[9] != $self->{ts}) {
        $self->{clean}    = $self->{ts} != 0;
        $self->{ts}       = (stat 'makefile')[9];
        $self->{files}    = $self->_prerequisites();
        $self->{files_ts} = {};
    }

    my $updated = 0;
    foreach my $file (@{ $self->{files} }) {
        if (!-e $file) {
            $self->{ts} = 0;
            $updated = 1;
        } else {
            my $ts = (stat $file)[9];
            if ($ts != ($self->{files_ts}->{$file} // 0)) {
                $updated = 1;
            }
            $self->{files_ts}->{$file} = $ts;
        }
    }
    return $updated;
}

sub _prerequisites {
    my ($self) = @_;
    my $web_path = $RealBin . '/web';
    my @files;
    find(
        sub {
            return unless /\.(?:js|sass|svg)$/;
            my $rel_file = File::Spec->abs2rel($File::Find::name, $web_path);
            return if $rel_file =~ m{^(?:public/static|build)/};
            push @files, $File::Find::name;
        },
        $web_path
    );
    return \@files;
}

1;

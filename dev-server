#!/usr/bin/perl
use local::lib;
use v5.10;
use strict;
use warnings;

use List::Util qw( any );
use Mojo::Server::Morbo ();
use Time::HiRes qw( sleep );

$| = 1;
my @switches = grep {/^-/} @ARGV;
$ENV{DEBUG} = 1;
$ENV{LOGBOT_CONFIG} = join(',', grep { !/^-/ } @ARGV) || '_development';

die "failed to find makefile\n" unless -e 'makefile';

# asset watch
{
    my $pid = fork();
    if (defined($pid) && $pid == 0) {
        my $make = Make->new();
        while (1) {
            $make->execute() if $make->updated();
            sleep(0.25);
        }
    }
}

# memcached
if (!any { $_ eq '--no-cache' } @switches) {
    my $pid = fork();
    if (defined($pid) && $pid == 0) {
        my $verbose = any { $_ eq '-v' || $_ eq '--verbose' } @switches;
        ## no critic (InputOutput::RequireBriefOpen)
        open(my $mc, '-|', 'memcached -vv 2>&1') || die "failed to start memcached: $!\n";
        say 'memcached listening on :11211' unless $verbose;
        while (<$mc>) {
            next unless $verbose;
            next
                if /^slab class/
                || /^<\d+ new auto-negotiating/
                || /^<\d+ connection closed/
                || /^\d+: Client using/;
            print 'memcached: ', $_;
        }
        close($mc) || die $!;
        ## use critic
        exit;
    }
}

# web server
my $morbo = Mojo::Server::Morbo->new();
$morbo->backend->watch(['web/templates/', 'web/templates/layouts/', 'lib/LogBot', 'lib/Logbot/Web']);
$morbo->run('logbot-web');

package Make;
use strict;
use v5.10;
use warnings;

use FindBin qw( $RealBin );
use lib "$RealBin/lib";

use File::Find qw( find );
use File::Spec ();
use LogBot::Util qw( file_time run );

sub new {
    my ($class) = @_;
    return bless({ ts => 0, first => 1 }, $class);
}

sub execute {
    my ($self) = @_;
    if ($self->{clean}) {
        run('make', 'clean');
        delete $self->{clean};
    }
    my @command = ('make');
    push @command, '--quiet' if delete $self->{first};
    run(@command);
}

sub updated {
    my ($self) = @_;

    if (file_time('makefile') != $self->{ts}) {
        $self->{clean}    = $self->{ts} != 0;
        $self->{ts}       = file_time('makefile');
        $self->{files}    = $self->_prerequisites();
        $self->{files_ts} = {};
    }

    my $updated = 0;
    foreach my $file (@{ $self->{files} }) {
        if (!-e $file) {
            $self->{ts} = 0;
            $updated = 1;
        } else {
            my $ts = file_time($file);
            if ($ts != ($self->{files_ts}->{$file} // 0)) {
                $updated = 1;
            }
            $self->{files_ts}->{$file} = $ts;
        }
    }
    return $updated;
}

sub _prerequisites {
    my ($self) = @_;
    my $web_path = $RealBin . '/web';
    my @files;
    find(
        sub {
            return unless /\.(?:js|sass|svg)$/;
            my $rel_file = File::Spec->abs2rel($File::Find::name, $web_path);
            return if $rel_file =~ m{^(?:public/static|build)/};
            push @files, $File::Find::name;
        },
        $web_path
    );
    return \@files;
}

1;
